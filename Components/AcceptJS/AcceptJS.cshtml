@inject XperienceCommunity.GenericEcommerce.AcceptJS.IAcceptJSOptions options
<form id="paymentForm"
    method="POST"
    action="/AcceptJS/Payment">
    <button type="button"
        class="AcceptUI btn btn-primary btn-lg btn-block"
        data-billingAddressOptions='{"show":true, "required":true}' 
        data-apiLoginID="@options.AcceptJSApiLoginID()" 
        data-clientKey="@options.AcceptJSClientKey()"
        data-acceptUIFormBtnTxt="Submit Payment" 
        data-acceptUIFormHeaderTxt="Card Information"
        data-paymentOptions='{"showCreditCard": true, "showBankAccount": false}' 
        data-responseHandler="acceptJSPaymentResponse"
        onclick="return pageValidated(event);">
            Submit Payment
    </button>
</form>
<div class="alert alert-danger acceptjs-alert" style="display: none" role="alert"></div>
<script type="text/javascript" data-initialize>
    if (!window.acceptJSLoaded) {
        var script = document.createElement('script');
        script.type = "text/javascript";
        script.src = "https://@(options.JsDomain())/v3/AcceptUI.js?" + Date.now().toString(36);
        document.body.appendChild(script);
        window.acceptJSLoaded = true;
    }

    window.acceptJSPaymentResponse = async function(response) {
        if (response.messages.resultCode === "Error") {
            var messages = response.messages.message.map(function(message) { return message.text; }).join("<br/>");
            console.log(response);
            var messageCont = document.querySelector(".acceptjs-alert");
            if(messageCont) {
                messageCont.innerHTML = messages;
                messageCont.style.display = "block";
            }
        } else {
            checkout.paymentObject = {
                dataDescriptor: response.opaqueData.dataDescriptor,
                dataValue: response.opaqueData.dataValue
            }
            checkout.sendCreateOrder(null);
        }
    }

    checkout.sendCreateOrder = function (ev) {
        if(!checkout.orderGUID) {
            document.body.dispatchEvent(checkout.createOrderEvent);
        } else {
            checkout.payment(null);
        }
    }

    checkout.payment = async function (ev) {
        checkout.paymentObject.orderGUID = checkout.orderGUID;
        fetch("/AcceptJS/Payment", {
            method: "POST",
            body: ecommerceClass.getJSON(checkout.paymentObject),
            headers: ecommerceClass.getPostHeaders()
        }).then((result) => {
            return result.json();
        }).then((json) => {
            document.body.dispatchEvent(checkout.paymentResultEvent(json));
        });
    };

    if(!window.acceptjsAlert) {
        window.acceptjsAlert = document.body.addEventListener("payment-result", function (ev) {
            if (!ev.detail.paymentSuccessful && ev.detail.message && ev.detail.message.type == 1) {
                var alert = ev.detail.message;
                //checkout.orderGUID = null;
                var messageCont = document.querySelector(".acceptjs-alert");
                if(messageCont) {
                    messageCont.innerHTML = alert.message;
                    messageCont.style.display = "block";
                }
                window.scrollTo(0, document.body.scrollHeight);
            }
        });
    }

    window.pageValidated = function(ev) {
        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var needsValidation = document.querySelectorAll('.needs-validation')
        // Loop over them and prevent submission
        var totalFailed = 0;

        Array.prototype.slice.call(needsValidation)
            .filter(el => !el.classList.contains("shipping-address") || document.body.querySelector("#differentAddress")?.checked)
            .forEach(function (element) {
                var inputs = element.querySelectorAll("input, select");
                Array.prototype.slice.call(inputs).forEach((childElement) => {
                    if (!childElement.checkValidity()) {
                        totalFailed++;
                    }
                });
                element.classList.add('was-validated')
            });
        if(totalFailed > 0) {
            ev.preventDefault();
            setTimeout(function() { 
                var queries = document.querySelectorAll("#AcceptUIBackground, #AcceptUIContainer");
                queries.forEach(function(item){
                    item.classList.remove("show");
                }); 
            }, 100);
        }
        return totalFailed == 0;
    }
</script>